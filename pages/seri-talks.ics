BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//alvg calendar generator//PL related talks//EN
REFRESH-INTERVAL;VALUE=DURATION:PT4H
X-WR-CALNAME:SERI Talks
BEGIN:VEVENT
SUMMARY:SERI - Titles:  (1) Leveraging Program Structures & Learning-based
  Techniques to Improve Type-4 Code Clone Detection Techniques  (2) BiRD: R
 ace Detection in Software Binaries under Relaxed Memory Models.
DTSTART;TZID=Asia/Calcutta;VALUE=DATE-TIME:20230117T190000
DTEND;TZID=Asia/Calcutta;VALUE=DATE-TIME:20230117T200000
UID:2023-01@seri
DESCRIPTION:Registration: Use this link to register for the talk.  Registr
 ation is required to attend the talk\, which takes only 1 minute. Register
  any time before the talk\, but register early to ensure your spot! After 
 registering\, you will receive a confirmation email containing information
  about joining the meeting. \n\n Reg-Link: https://us06web.zoom.us/meeting
 /register/tZ0td--upz0oHdLe8pKRAAAksYVlWl1LoS-e\n\n\nTitles:  (1) Leveragin
 g Program Structures & Learning-based Techniques to Improve Type-4 Code Cl
 one Detection Techniques  (2) BiRD: Race Detection in Software Binaries un
 der Relaxed Memory Models.\nSpeakers: (1) Nikita Mehrotra (2) Ridhi Jain\n
 Abstracts (1) Code clones are duplicate code fragments that share (nearly)
  similar syntax or semantics. Code clone detection plays an important role
  in software maintenance\, code refactoring\, and reuse. A substantial amo
 unt of research has been conducted in the past to detect clones. A majorit
 y of these approaches use lexical and syntactic information to detect clon
 es. However\, only a few of them target semantic clones. Recently\, motiva
 ted by the success of deep learning models in other fields\, including nat
 ural language processing and computer vision\, researchers have attempted 
 to adopt deep learning techniques to detect code clones. These approaches 
 use lexical information (tokens) and(or) syntactic structures like abstrac
 t syntax trees (ASTs) to detect code clones. However\, they do not make su
 fficient use of the available structural and semantic information\, hence 
 limiting their capabilities. This work addresses the problem of semantic c
 ode clone detection using program dependency graphs and graph neural netwo
 rks\, leveraging the program structured syntactic and semantic information
 . This talk is based on the following accepted paper: Modelling Functional
  Similarity in Source Code with Graph-based Siamese Neural Networks Venue:
  TSE Journal First\, 2021.(2) Instruction reordering and interleavings in 
 program execution under relaxed memory semantics result in non-intuitive b
 ehaviors\, making it difficult to provide assurances about program correct
 ness. Several static analyses approaches exist\, but studies have shown th
 at up to 90% of the concurrency bugs reported by state-of-the-art static a
 nalyzers are false alarms. As a result\, filtering false alarms and detect
 ing real concurrency bugs is a challenging problem. Unsurprisingly\, this 
 problem has attracted the interest of the research community over the past
  few decades. Nonetheless\, many of the existing techniques rely on analyz
 ing source code and rarely consider theeffects introduced by compilers\, a
 nd assume a sequentially consistent memory model. In a practical setting\,
  however\, developers often do not have access to the source code\, and ev
 en commodity architectures such as x86 and ARM are not sequentially consis
 tent. In this work\, we present BiRD\, a prototype tool\, to dynamically d
 etect harmful data races in x86 binaries under relaxed memory models\, TSO
  and PSO. BiRD employs {\\em source-DPOR} to explore all distinct feasible
  interleavings for a multithreaded application. Our evaluation of BiRD on 
 42 publicly available benchmarks and its comparison with the state-of-the-
 art tools indicate BiRD's potential in effectively detecting data races in
  software binaries.
LOCATION:https://us06web.zoom.us/meeting/register/tZ0td--upz0oHdLe8pKRAAAk
 sYVlWl1LoS-e
ORGANIZER:MAILTO:seri
PRIORITY:5
END:VEVENT
END:VCALENDAR
