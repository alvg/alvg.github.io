BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//alvg calendar generator//PL related talks//EN
REFRESH-INTERVAL;VALUE=DURATION:PT4H
X-WR-CALNAME:SERI Talks
BEGIN:VEVENT
SUMMARY:SERI - Titles:  (1) Leveraging Program Structures & Learning-based
  Techniques to Improve Type-4 Code Clone Detection Techniques  (2) BiRD: R
 ace Detection in Software Binaries under Relaxed Memory Models.
DTSTART;TZID=Asia/Calcutta;VALUE=DATE-TIME:20230117T190000
DTEND;TZID=Asia/Calcutta;VALUE=DATE-TIME:20230117T200000
UID:2023-01@seri
DESCRIPTION:Registration: Use this link to register for the talk.  Registr
 ation is required to attend the talk\, which takes only 1 minute. Register
  any time before the talk\, but register early to ensure your spot! After 
 registering\, you will receive a confirmation email containing information
  about joining the meeting. \n\n Link:https://us06web.zoom.us/meeting/regi
 ster/tZ0td--upz0oHdLe8pKRAAAksYVlWl1LoS-e\n\n\nTitles:  (1) Leveraging Pro
 gram Structures & Learning-based Techniques to Improve Type-4 Code Clone D
 etection Techniques  (2) BiRD: Race Detection in Software Binaries under R
 elaxed Memory Models.\nSpeakers: (1) Nikita Mehrotra (2) Ridhi Jain\nAbstr
 acts (1) Code clones are duplicate code fragments that share (nearly) simi
 lar syntax or semantics. Code clone detection plays an important role in s
 oftware maintenance\, code refactoring\, and reuse. A substantial amount o
 f research has been conducted in the past to detect clones. A majority of 
 these approaches use lexical and syntactic information to detect clones. H
 owever\, only a few of them target semantic clones. Recently\, motivated b
 y the success of deep learning models in other fields\, including natural 
 language processing and computer vision\, researchers have attempted to ad
 opt deep learning techniques to detect code clones. These approaches use l
 exical information (tokens) and(or) syntactic structures like abstract syn
 tax trees (ASTs) to detect code clones. However\, they do not make suffici
 ent use of the available structural and semantic information\, hence limit
 ing their capabilities. This work addresses the problem of semantic code c
 lone detection using program dependency graphs and graph neural networks\,
  leveraging the program structured syntactic and semantic information. Thi
 s talk is based on the following accepted paper: Modelling Functional Simi
 larity in Source Code with Graph-based Siamese Neural Networks Venue: TSE 
 Journal First\, 2021.(2) Instruction reordering and interleavings in progr
 am execution under relaxed memory semantics result in non-intuitive behavi
 ors\, making it difficult to provide assurances about program correctness.
  Several static analyses approaches exist\, but studies have shown that up
  to 90% of the concurrency bugs reported by state-of-the-art static analyz
 ers are false alarms. As a result\, filtering false alarms and detecting r
 eal concurrency bugs is a challenging problem. Unsurprisingly\, this probl
 em has attracted the interest of the research community over the past few 
 decades. Nonetheless\, many of the existing techniques rely on analyzing s
 ource code and rarely consider theeffects introduced by compilers\, and as
 sume a sequentially consistent memory model. In a practical setting\, howe
 ver\, developers often do not have access to the source code\, and even co
 mmodity architectures such as x86 and ARM are not sequentially consistent.
  In this work\, we present BiRD\, a prototype tool\, to dynamically detect
  harmful data races in x86 binaries under relaxed memory models\, TSO and 
 PSO. BiRD employs {\\em source-DPOR} to explore all distinct feasible inte
 rleavings for a multithreaded application. Our evaluation of BiRD on 42 pu
 blicly available benchmarks and its comparison with the state-of-the-art t
 ools indicate BiRD's potential in effectively detecting data races in soft
 ware binaries.
LOCATION:https://us06web.zoom.us/meeting/register/tZ0td--upz0oHdLe8pKRAAAk
 sYVlWl1LoS-e
ORGANIZER:MAILTO:seri
PRIORITY:5
END:VEVENT
END:VCALENDAR
